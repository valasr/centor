// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryClient interface {
	GetInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Connect(ctx context.Context, opts ...grpc.CallOption) (Discovery_ConnectClient, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error)
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	CallAPI(ctx context.Context, in *APIRequest, opts ...grpc.CallOption) (*APIResponse, error)
	SendFile(ctx context.Context, opts ...grpc.CallOption) (Discovery_SendFileClient, error)
	FireEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*Close, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	Change(ctx context.Context, in *ChangeRequest, opts ...grpc.CallOption) (*Close, error)
	Notice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*Close, error)
}

type discoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryClient(cc grpc.ClientConnInterface) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) GetInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/proto.Discovery/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Discovery_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Discovery_ServiceDesc.Streams[0], "/proto.Discovery/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryConnectClient{stream}
	return x, nil
}

type Discovery_ConnectClient interface {
	Send(*ConnectMessage) error
	Recv() (*ConnectBackMessage, error)
	grpc.ClientStream
}

type discoveryConnectClient struct {
	grpc.ClientStream
}

func (x *discoveryConnectClient) Send(m *ConnectMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *discoveryConnectClient) Recv() (*ConnectBackMessage, error) {
	m := new(ConnectBackMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *discoveryClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, "/proto.Discovery/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, "/proto.Discovery/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) CallAPI(ctx context.Context, in *APIRequest, opts ...grpc.CallOption) (*APIResponse, error) {
	out := new(APIResponse)
	err := c.cc.Invoke(ctx, "/proto.Discovery/CallAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (Discovery_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Discovery_ServiceDesc.Streams[1], "/proto.Discovery/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoverySendFileClient{stream}
	return x, nil
}

type Discovery_SendFileClient interface {
	Send(*SendFileRequest) error
	CloseAndRecv() (*SendFileReponse, error)
	grpc.ClientStream
}

type discoverySendFileClient struct {
	grpc.ClientStream
}

func (x *discoverySendFileClient) Send(m *SendFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *discoverySendFileClient) CloseAndRecv() (*SendFileReponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendFileReponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *discoveryClient) FireEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.Discovery/FireEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/proto.Discovery/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Change(ctx context.Context, in *ChangeRequest, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.Discovery/Change", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Notice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.Discovery/Notice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServer is the server API for Discovery service.
// All implementations should embed UnimplementedDiscoveryServer
// for forward compatibility
type DiscoveryServer interface {
	GetInfo(context.Context, *EmptyRequest) (*InfoResponse, error)
	Connect(Discovery_ConnectServer) error
	Ping(context.Context, *PingRequest) (*PongResponse, error)
	Call(context.Context, *CallRequest) (*CallResponse, error)
	CallAPI(context.Context, *APIRequest) (*APIResponse, error)
	SendFile(Discovery_SendFileServer) error
	FireEvent(context.Context, *EventRequest) (*Close, error)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	Change(context.Context, *ChangeRequest) (*Close, error)
	Notice(context.Context, *NoticeRequest) (*Close, error)
}

// UnimplementedDiscoveryServer should be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServer struct {
}

func (UnimplementedDiscoveryServer) GetInfo(context.Context, *EmptyRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedDiscoveryServer) Connect(Discovery_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDiscoveryServer) Ping(context.Context, *PingRequest) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDiscoveryServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedDiscoveryServer) CallAPI(context.Context, *APIRequest) (*APIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallAPI not implemented")
}
func (UnimplementedDiscoveryServer) SendFile(Discovery_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedDiscoveryServer) FireEvent(context.Context, *EventRequest) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireEvent not implemented")
}
func (UnimplementedDiscoveryServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedDiscoveryServer) Change(context.Context, *ChangeRequest) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedDiscoveryServer) Notice(context.Context, *NoticeRequest) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notice not implemented")
}

// UnsafeDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryServer will
// result in compilation errors.
type UnsafeDiscoveryServer interface {
	mustEmbedUnimplementedDiscoveryServer()
}

func RegisterDiscoveryServer(s grpc.ServiceRegistrar, srv DiscoveryServer) {
	s.RegisterService(&Discovery_ServiceDesc, srv)
}

func _Discovery_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Discovery/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).GetInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DiscoveryServer).Connect(&discoveryConnectServer{stream})
}

type Discovery_ConnectServer interface {
	Send(*ConnectBackMessage) error
	Recv() (*ConnectMessage, error)
	grpc.ServerStream
}

type discoveryConnectServer struct {
	grpc.ServerStream
}

func (x *discoveryConnectServer) Send(m *ConnectBackMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *discoveryConnectServer) Recv() (*ConnectMessage, error) {
	m := new(ConnectMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Discovery_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Discovery/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Discovery/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_CallAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).CallAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Discovery/CallAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).CallAPI(ctx, req.(*APIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DiscoveryServer).SendFile(&discoverySendFileServer{stream})
}

type Discovery_SendFileServer interface {
	SendAndClose(*SendFileReponse) error
	Recv() (*SendFileRequest, error)
	grpc.ServerStream
}

type discoverySendFileServer struct {
	grpc.ServerStream
}

func (x *discoverySendFileServer) SendAndClose(m *SendFileReponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *discoverySendFileServer) Recv() (*SendFileRequest, error) {
	m := new(SendFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Discovery_FireEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).FireEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Discovery/FireEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).FireEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Discovery/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Discovery/Change",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Change(ctx, req.(*ChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Notice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Notice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Discovery/Notice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Notice(ctx, req.(*NoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Discovery_ServiceDesc is the grpc.ServiceDesc for Discovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Discovery_GetInfo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Discovery_Ping_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _Discovery_Call_Handler,
		},
		{
			MethodName: "CallAPI",
			Handler:    _Discovery_CallAPI_Handler,
		},
		{
			MethodName: "FireEvent",
			Handler:    _Discovery_FireEvent_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Discovery_Exec_Handler,
		},
		{
			MethodName: "Change",
			Handler:    _Discovery_Change_Handler,
		},
		{
			MethodName: "Notice",
			Handler:    _Discovery_Notice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Discovery_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendFile",
			Handler:       _Discovery_SendFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}

// ProxyManagerClient is the client API for ProxyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyManagerClient interface {
	SendPayload(ctx context.Context, in *RequestPayload, opts ...grpc.CallOption) (*ResponsePayload, error)
}

type proxyManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyManagerClient(cc grpc.ClientConnInterface) ProxyManagerClient {
	return &proxyManagerClient{cc}
}

func (c *proxyManagerClient) SendPayload(ctx context.Context, in *RequestPayload, opts ...grpc.CallOption) (*ResponsePayload, error) {
	out := new(ResponsePayload)
	err := c.cc.Invoke(ctx, "/proto.ProxyManager/SendPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyManagerServer is the server API for ProxyManager service.
// All implementations should embed UnimplementedProxyManagerServer
// for forward compatibility
type ProxyManagerServer interface {
	SendPayload(context.Context, *RequestPayload) (*ResponsePayload, error)
}

// UnimplementedProxyManagerServer should be embedded to have forward compatible implementations.
type UnimplementedProxyManagerServer struct {
}

func (UnimplementedProxyManagerServer) SendPayload(context.Context, *RequestPayload) (*ResponsePayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPayload not implemented")
}

// UnsafeProxyManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyManagerServer will
// result in compilation errors.
type UnsafeProxyManagerServer interface {
	mustEmbedUnimplementedProxyManagerServer()
}

func RegisterProxyManagerServer(s grpc.ServiceRegistrar, srv ProxyManagerServer) {
	s.RegisterService(&ProxyManager_ServiceDesc, srv)
}

func _ProxyManager_SendPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyManagerServer).SendPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProxyManager/SendPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyManagerServer).SendPayload(ctx, req.(*RequestPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyManager_ServiceDesc is the grpc.ServiceDesc for ProxyManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProxyManager",
	HandlerType: (*ProxyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPayload",
			Handler:    _ProxyManager_SendPayload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
